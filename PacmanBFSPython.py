from collections import deque 

def _pacbfs(graph_pac, starting, ending):
    visit = set()
    queue = deque([(starting, [starting])])

    while queue:
        node, path = queue.popleft()
        if node == ending:
            return path
        if node not in visit:
            visit.add(node)
            for neighbor in graph_pac[node]:
                queue.append((neighbor, path+[neighbor]))


graph_pac = {
    (7, 11): [(7, 12)],
    (7, 12): [(7, 11), (7, 13)],
    (7, 13): [(7,12), (6,13), (7,14), (8,13)],
    (6,13): [(7,13), (5,13)],
    (7,14): [(7,13), (7,15)],
    (8,13): [(7,13), (9,13)],
    (5,13) : [(6,13), (4,13), (5,14)],
    (7,15) : [(7,14), (7,16), (8,15)],
    (9,13) : [(8,13), (9,12)],
    (4,13) : [(5,13), (3,13)],
    (5,14) : [(5,13), (5,15)],
    (7,16) : [(7,15), (6,16)],
    (8,15) : [(7,15), (9,15)],
    (9,12) : [(9,13), (9,11)],
    (3,13) : [(4,13), (3,14), (3,12), (2,13)],
    (5,15) : [(5,14), (5,16)],
    (6,16) : [(7,16), (5,16)],
    (9,15) : [(8,15), (9,16)],
    (9,11) : [(9,12), (9,10)],
    (3,14) : [(3,13), (3,15)],
    (3,12) : [(3,13), (3,11)],
    (5,16): [(5,15), (6,16), (4,16), (5,17)],
    (9,16) : [(9,15), (9,17)],
    (9,10): [(9,11), (9,9)],
    (3,15) : [(3,14), (3,16), (2,15)],
    (3,11): [(3,12), (3,10)],
    (4,16) : [(5,16), (3,16)],
    (5,17) : [(5,16), (5,18)],
    (9,17) : [(9,16), (9,18)],
    (9,9) : [(9,10), (9,8)],
    (3,16) : [(3,15), (4,16)],
    (2,15) : [(3,15), (1,15)],
    (3,10) : [(3,11), (4,10), (3,9)],
    (5,18) : [(5,17), (6,18), (4,18)],
    (9,18) : [(9,17), (8,18)],
    (9,8) : [(9,9), (9,7)],
    (1,15) : [(2,15), (1,16)],
    (4,10) : [(3,10), (4,9), (5,10)],
    (3, 9) : [(3,10), (4,9), (3,8)],
    (6,18) : [(5,18), (7,18)],
    (4,18) : [(5,18), (3,18)],
    (8,18) : [(9,18), (7,18)],
    (9,7) : [(9,8), (9,6)],
    (1,16) : [(1,15), (1,17)], 
    (4,9) : [(4,10), (3,9), (5,9)],
    (5,10) : [(4,10), (5,11)],
    (3,8): [(3,9), (3,7)],
    (7,18) : [(6,18), (8,18)],
    (3,18) : [(4,18), (2,18)],
    (9,6) : [(9,7), (8,6)], 
    (1,17) : [(1,16), (1,18)],
    (5,9) : [(4,9), (5,8), (5,10)],
    (5,11) : [(5,10)],
    (3,7): [(3,8), (3,6)],
    (2,18) : [(3,18), (1,18)],
    (8,6) : [(9,6), (7,6)],
    (1,18) : [(1,17), (2,18)],
    (5,8) : [(5,9)],
    (3,6) : [(3,7), (4,6), (3,5), (2,6)],
    (7,6) : [(8,6), (7,7), (7,5), (6,6)],
    (4,6) : [(3,6), (5,6)],
    (3,5) : [(3,6), (3,4)],
    (2,6) : [(3,6), (1,6)],
    (7,7) : [(7,6), (7,8)],
    (7,5) : [(7,6), (7,4)],
    (6,6) : [(7,6), (5,6)],
    (5,6) : [(4,6), (6,6), (5,5)],
    (3,4): [(3,5), (3,3), (2,4)],
    (1,6) : [(2,6), (1,7)],
    (7,8) : [(7,7), (7,9)],
    (7,4) : [(7,5), (7,3), (8,4)],
    (5,5) : [(5,6), (5,4)],
    (3,3) : [(3,4), (4,3)],
    (2,4) : [(3,4), (1,4)],
    (1,7) : [(1,6), (1,8)],
    (7,9) : [(7,8), (7,10)],
    (7,3) : [(7,4), (6,3)],
    (8,4) : [(7,4), (9,4)],
    (5,4) : [(5,5), (5,3)],
    (4,3) : [(3,3), (5,3)],
    (1,4) : [(2,4), (1,3)],
    (1,8) : [(1,7), (1,9)],
    (7,10) : [(7,9), (7,11)],
    (6,3) : [(7,3), (5,3)],
    (9,4) : [(8,4), (9,3)],
    (5,3) : [(5,4), (4,3), (6,3), (5,2)],
    (1,3) : [(1,4), (1,2)], 
    (1,9) : [(1,8), (1,10)],
    (9,3) : [(9,4), (9,12)],
    (5,2) : [(5,3), (5,1)],
    (1,2) : [(1,3), (1,1)],
    (1,10) : [(1,9), (1,11)],
    (5,1) : [(5,2), (4,1), (6,1)],
    (1,1) : [(1,2), (2,1)],
    (1,11) : [(1,10), (1,12)],
    (4,1) :[(5,1), (3,1)],
    (6,1) : [(5,1), (7,1)],
    (2,1) : [(1,1), (3,1)],
    (3,1) : [(2,1), (4,1)],
    (1,12) : [(1,11), (1,13)],
    (7,1) : [(6,1), (8,1)],
    (1,13) : [(1,12), (2,13)],
    (8,1) : [(7,1), (9,1)],
    (2,13) : [(1,13), (3,13)],
    (9,1) : [(8,1), (9,2)],
    (9,2) : [(9,1), (9,3)],
}

start_point = (7,11)
finish_point = (9,18)
second_start = (9,18)
second_finish = (1,1)

if start_point not in graph_pac or finish_point not in graph_pac:
    print("GAME OVER")
else:
    path = _pacbfs(graph_pac, start_point, finish_point)
    print("\n")
    path_two = _pacbfs(graph_pac, second_start, second_finish)
    if path:
        print("Caminho encontrado ", ' -> '.join(map(str,path)))
        print("\nCaminho encontrado ", ' -> '.join(map(str, path_two)))
        print("\n\t\t\t\tPARABÉNS VOCÊ VENCEU")
    else:
        print("Não há caminho possivel ")
        print("GAME OVER, TENTE NOVAMENTE")